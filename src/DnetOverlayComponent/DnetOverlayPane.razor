@using DnetOverlayComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Services.CssBuilder

<div class="cdk-overlay-pane" style="@Styles">
    @ContentChild
</div>

@code {

    [Parameter]
    public RenderFragment ContentChild { get; set; }

    [Parameter]
    public OverlayConfig OverlayConfig { get; set; }


    public string Styles { get; set; } = null;

    protected override void OnInitialized()
    {
        Styles = GetStyles();
    }

    private string GetStyles()
    {

        var globalPositionStrategy = OverlayConfig.GlobalPositionStrategy;

        var shouldBeFlushHorizontally = (OverlayConfig.Width == "100%" || OverlayConfig.Width == "100vw") &&
                                            (string.IsNullOrEmpty(OverlayConfig.MaxWidth) || OverlayConfig.MaxWidth == "100%" || OverlayConfig.MaxWidth == "100vw");

        var shouldBeFlushVertically = (OverlayConfig.Height == "100%" || OverlayConfig.Height == "100vh") &&
                                        (string.IsNullOrEmpty(OverlayConfig.MaxHeight) || OverlayConfig.MaxHeight == "100%" || OverlayConfig.MaxHeight == "100vh");

        var marginLeft = shouldBeFlushHorizontally ? "0" : globalPositionStrategy.GetLeftOffset();
        var marginTop = shouldBeFlushVertically ? "0" : globalPositionStrategy.GetTopOffset();
        var marginBottom = globalPositionStrategy.GetBottomOffset();
        var marginRight = globalPositionStrategy.GetRightOffset();

        var styles = new StyleBuilder("pointer-events", "auto")
            .AddStyle("position", "static")
            .AddStyle("margin-left", marginLeft, when: !string.IsNullOrEmpty(marginLeft))
            .AddStyle("margin-top", marginTop, when: !string.IsNullOrEmpty(marginTop))
            .AddStyle("margin-bottom", marginBottom, when: !string.IsNullOrEmpty(marginBottom))
            .AddStyle("margin-right", marginRight, when: !string.IsNullOrEmpty(marginRight))
            .Build();

        return styles;
    }
}
