
@using System.Globalization
@using DnetOverlayComponent.Infrastructure.Enums
@using DnetOverlayComponent.Infrastructure.Interfaces
@using DnetOverlayComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Services
@using DnetOverlayComponent.Infrastructure.Services.CssBuilder
@using Microsoft.AspNetCore.Components.Web

@inject IOverlayService OverlayService

<div class="@OverlayCssClasses">

    @foreach (var backdrop in _backdrops)
    {
        var (cssClasses, styles) = backdrop.Value;

        <div class="@cssClasses" style="@styles" @onclick="@(e => BackdropClicked(e, backdrop.Key))"></div>
    }

    @ContenChild

</div>

@code {

    private Dictionary<int, Tuple<RenderFragment, OverlayConfig>> _overlays { get; set; } = new Dictionary<int, Tuple<RenderFragment, OverlayConfig>>();

    private Dictionary<int, Tuple<string, string>> _backdrops { get; set; } = new Dictionary<int, Tuple<string, string>>();




    public RenderFragment ContenChild { get; set; }

    public string OverlayCssClasses { get; set; }

    public string BackdropCssClasses { get; set; }

    public bool HasBackdrop { get; set; } = false;


    protected override void OnInitialized()
    {
        OverlayCssClasses = GetOverlayCssClasses();

        ((OverlayService)OverlayService).OnAttach += AttachOverlay;
        ((OverlayService)OverlayService).OnDetach += DetachOverlay;
    }

    private async void AttachOverlay(RenderFragment content, OverlayConfig overlayConfig)
    {
        if (overlayConfig.HasBackdrop) AttachBackdrop(overlayConfig);

        var pane = CreatePaneElement(content, overlayConfig);
        var host = CreateHostElement(pane, overlayConfig);

        var overlayData = new Tuple<RenderFragment, OverlayConfig>(host, overlayConfig);

        _overlays.Add(overlayConfig.OverlayRef, overlayData);

        ContenChild = AddHostConent(_overlays);

        await InvokeAsync(StateHasChanged);
    }

    private async void DetachOverlay(OverlayResult overlayDataResult)
    {
        var overlay = _overlays.GetValueOrDefault(overlayDataResult.OverlayRef);

        if (overlay.Item2.HasBackdrop) DetachBackdrop(overlayDataResult);

        _overlays.Remove(overlayDataResult.OverlayRef);

        ContenChild = AddHostConent(_overlays);

        await InvokeAsync(StateHasChanged);
    }

    private void AttachBackdrop(OverlayConfig overlayConfig)
    {
        BackdropCssClasses = GetBackdropCssClasses(overlayConfig);

        var style = _backdrops.Any() ? "opacity: 0;" : "";

        var styles = new Tuple<string, string>(BackdropCssClasses, style);

        _backdrops.Add(overlayConfig.OverlayRef, styles);

        HasBackdrop = true;
    }

    private void DetachBackdrop(OverlayResult overlayDataResult)
    {
        _backdrops.Remove(overlayDataResult.OverlayRef);
    }

    private RenderFragment CreatePaneElement(RenderFragment content, OverlayConfig overlayConfig)
    {

        var pane = new RenderFragment(x =>
        {
            x.OpenComponent(0, typeof(DnetOverlayPane));
            x.AddAttribute(1, "ContentChild", content);
            x.AddAttribute(2, "OverlayConfig", overlayConfig);
            x.SetKey(Guid.NewGuid());
            x.CloseComponent();
        });

        return pane;
    }

    private RenderFragment CreateHostElement(RenderFragment pane, OverlayConfig overlayConfig)
    {

        var host = new RenderFragment(x =>
        {
            x.OpenComponent(0, typeof(DnetOverlayHost));
            x.AddAttribute(1, "ContentChild", pane);
            x.AddAttribute(2, "OverlayConfig", overlayConfig);
            x.SetKey(overlayConfig.OverlayRef);
            x.CloseComponent();
        });

        return host;
    }

    private RenderFragment AddHostConent(Dictionary<int, Tuple<RenderFragment, OverlayConfig>> overlays)
    {

        var content = new RenderFragment(x =>
        {
            x.OpenElement(0, "div");
            foreach (var over in overlays)
            {
                var (overlayContent, overlayConfig) = over.Value;

                x.AddContent(over.Key, overlayContent);
            }
            x.CloseElement();
        });

        return content;
    }

    private string GetOverlayCssClasses()
    {

        var classes = new CssBuilder("cdk-overlay-container")
            .Build();

        return classes;
    }

    private string GetBackdropCssClasses(OverlayConfig overlayConfig)
    {

        var classes = new CssBuilder("cdk-overlay-backdrop cdk-overlay-backdrop-showing")
            .AddClass("cdk-overlay-transparent-backdrop", when: overlayConfig.HasTransparentBackdrop)
            .AddClass("cdk-overlay-dark-backdrop", when: !overlayConfig.HasTransparentBackdrop)
            .AddClass(overlayConfig.BackdropClass, when: !string.IsNullOrEmpty(overlayConfig.BackdropClass))
            .Build();

        return classes;
    }

    public void BackdropClicked(MouseEventArgs e, int reference)
    {
        OverlayService.BackdropClicked(new OverlayResult { CloseReason = CloseReason.Cancel, OverlayRef = reference });
    }
}
