@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Drawing
@using DnetDialogComponent.Infrastructure.Interfaces
@using DnetDialogComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Enums
@using DnetOverlayComponent.Infrastructure.Interfaces
@using DnetOverlayComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Services
@using DnetOverlayComponent.Infrastructure.Services.CssBuilder
@using ServerSide.Infrastructure.Entities
@using Size = DnetOverlayComponent.Infrastructure.Models.Size

@inject IJSRuntime JSRuntime

@inject IViewportRuler ViewportRuler

@inject IOverlayService OverlayService
@inject IDialogService DialogService

@inject DnetOverlayInterop DnetOverlayInterop

@implements IDisposable

<div class="dnet-m-l-40 dnet-m-t-40">
    <div class="d-flex">
        <span class="dnet-m-r-10" style="font-size: 1.5rem; font-weight: bold">Blazor Overlay Libraryt v.1.0.0</span>
    </div>

    <button @onclick="ShowDialog" class="btn btn-primary dnet-m-t-20 dnet-m-b-20" style="border-radius: 0">Show Dialog</button>

    <div class="d-flex dnet-m-b-40">
        <span class="dnet-m-r-10">Result from Dialog Component:</span>
        <span style="font-weight: bold">@_dialogData</span>
    </div>
</div>


@code {


    private List<MarineOperator> _items = new List<MarineOperator>();

    private List<MarineOperator> _virtualScrollitems = new List<MarineOperator>();

    string _dialogData;

    private ElementReference _tooltipTarget;

    private ElementReference _autocompleteInput;

    private OverlayReference _tooltipReference;

    private string _filterValue = "";

    private FormData _formData = new FormData();

    private FormData _formData1 = new FormData();

    private string _autocompleteStyle = "";


    protected override void OnInitialized()
    {
        _items = GetAutocompleteData();

        _virtualScrollitems = GetVirtualScrollData();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ViewportRuler.OnResized += WindowResizedA;
        }
    }

    void WindowResizedA(object _, Size size)
    {
        var tt = size;
    }

    void ShowDialog()
    {
        var dialogConfig = new DialogConfig()
        {
            Title = "Datalnet Modal component",
            HasBackdrop = true,
            HasTransparentBackdrop = false,
            Width = "800px",
            Height = "800px"
        };

        var person = new Person()
        {
            Name = "Adrián",
            LastName = "Mustelier"
        };

        var contentData = new ContentData();

        contentData.SetValue(person);

        var dialogReference = DialogService.Open<OverlayTestContent, Person>(dialogConfig, contentData);

        dialogReference.Close += CloseDialog;
    }

    void CloseDialog(OverlayResult overlayDataResult)
    {
        _dialogData = overlayDataResult.CloseReason == CloseReason.Ok ? overlayDataResult.ComponentData.ToString() : "";

        InvokeAsync(StateHasChanged);
    }

    public void HideTooltip()
    {
        //ToastService.Close(new OverlayResult { OverlayRef = _tooltipReference.GetOverlayReferenceId() });
    }

    public List<MarineOperator> GetAutocompleteData()
    {

        var items = new List<MarineOperator>();

        var rnd = new Random();

        for (int i = 1; i < 6000; i++)
        {
            var item = new MarineOperator
            {
                MarineOperatorId = i,
                Name = $"MarineOperator {i}",
                Color = Color.FromArgb(rnd.Next(256), rnd.Next(256), rnd.Next(256))
            };

            items.Add(item);
        }

        var item1 = new MarineOperator
        {
            MarineOperatorId = 7000,
            Name = null,
            Color = Color.FromArgb(rnd.Next(256), rnd.Next(256), rnd.Next(256))
        };

        items.Add(item1);

        return items;
    }

    public List<MarineOperator> GetVirtualScrollData()
    {

        var items = new List<MarineOperator>();

        var rnd = new Random();

        for (int i = 1; i < 6000; i++)
        {
            var item = new MarineOperator
            {
                MarineOperatorId = i,
                Name = $"MarineOperator {i}",
                Color = Color.FromArgb(rnd.Next(256), rnd.Next(256), rnd.Next(256))
            };

            items.Add(item);
        }

        return items;
    }

    private void OnAutocompleteFilter(MarineOperator item)
    {
        var value = item;
    }

    private void MyValueChangeHandler(string item)
    {
        _formData.FilterValue = item;
    }

    public void Dispose()
    {
        if (ViewportRuler != null)
        {
            ViewportRuler.OnResized -= WindowResizedA;
        }
    }

    protected class FormData
    {
        [Required]
        public string FilterValue { get; set; } = string.Empty;
    }

}



