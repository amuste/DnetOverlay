@using System.ComponentModel.DataAnnotations
@using System.Drawing
@using DnetDialogComponent.Infrastructure.Interfaces
@using DnetDialogComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Enums
@using DnetOverlayComponent.Infrastructure.Models
@using DnetOverlayComponent.Infrastructure.Services
@using ServerSide.Infrastructure.Entities
@inject IDialogService DialogService

<div class="d-flex flex-column justify-content-between" style="height: 100%">
    <div class="d-flex flex-column">
        <span style="color: black; font-weight: 700; font-size: 0.75rem" class="dnet-m-b-10">Content @OverlayReferenceId</span>
        <div class="dnet-m-b-10">
            <p>This Dialog component has been built using DnetOverlay component. DnetOverlay provides a way to open floating panels on the screen</p>
            <span style="font-size: 0.75rem">Develop by @_person.Name @_person.LastName</span>
        </div>
        <span>Write a result data here</span>
        <input @bind-value="@_text" type="text" class="dnet-m-b-10 dnet-w-250" />
    </div>
    <div class="d-flex">
    </div>
    <div class="d-flex align-items-center justify-content-end">
        <button @onclick="CloseOverlay" class="btn btn-primary dnet-m-r-10" style="width: 80px; border-radius: 0">Ok</button>
        <button @onclick="CancelOverlay" class="btn btn-primary dnet-m-r-10" style="width: 80px; border-radius: 0">Close</button>
        <button @onclick="ShowDialog" class="btn btn-primary" style="border-radius: 0">Show Dialog</button>
    </div>
   
</div>

@code {

    [CascadingParameter] private int OverlayReferenceId { get; set; }

    [Parameter]
    public ContentData ContentData { get; set; }

    Person _person = new Person();

    string _text;

    private FormData _formData = new FormData();

    private string _autocompleteStyle = "";

    private List<MarineOperator> _items = new List<MarineOperator>();


    protected override void OnInitialized()
    {
        _person = ContentData.GetValue<Person>();

        _items = GetAutocompleteData();
    }

    void CloseOverlay()
    {
        var dataResult = new OverlayResult()
        {
            CloseReason = CloseReason.Ok,
            ComponentData = _text ?? "10",
            OverlayRef = OverlayReferenceId

        };

        DialogService.Close(dataResult);
    }

    void CancelOverlay()
    {
        var dataResult = new OverlayResult()
        {
            CloseReason = CloseReason.Cancel,
            ComponentData = null,
            OverlayRef = OverlayReferenceId

        };

        DialogService.Close(dataResult);
    }

    void ShowDialog()
    {
        var dialogConfig = new DialogConfig()
        {
            Title = "Datalnet Modal component",
            HasBackdrop = true,
            HasTransparentBackdrop = false,
            Width = $"{600 + 40 * OverlayReferenceId}px",
            Height = $"{400 + 40 * OverlayReferenceId}px"
        };

        var person = new Person()
        {
            Name = "Adrian",
            LastName = "Mustelier"
        };

        var contentData = new ContentData();

        contentData.SetValue(person);

        DialogService.Open<OverlayTestContent, Person>(dialogConfig, contentData);
    }

    private void OnAutocompleteFilter(MarineOperator item)
    {
        var value = item;
    }

    private void MyValueChangeHandler(string item)
    {
        _formData.FilterValue = item;
    }

    protected class FormData
    {
        [Required]
        public string FilterValue { get; set; } = string.Empty;
    }

    public List<MarineOperator> GetAutocompleteData()
    {

        var items = new List<MarineOperator>();

        var rnd = new Random();

        for (int i = 1; i < 50; i++)
        {
            var item = new MarineOperator
            {
                MarineOperatorId = i,
                Name = $"MarineOperator {i}",
                Color = Color.FromArgb(rnd.Next(256), rnd.Next(256), rnd.Next(256))
            };

            items.Add(item);
        }

        return items;
    }
}

